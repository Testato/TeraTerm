*** C:/usr/ttssh2/libs/putty-src/SSH.H	Fri Mar 04 22:34:48 2011
--- C:/usr/ttssh2/libs/putty/SSH.H	Tue Oct 16 00:11:12 2012
***************
*** 125,163 ****
  void hmacmd5_do_hmac(void *handle, unsigned char const *blk, int len,
  		     unsigned char *hmac);
  
  typedef struct {
      uint32 h[5];
      unsigned char block[64];
      int blkused;
      uint32 lenhi, lenlo;
  } SHA_State;
! void SHA_Init(SHA_State * s);
  void SHA_Bytes(SHA_State * s, void *p, int len);
! void SHA_Final(SHA_State * s, unsigned char *output);
  void SHA_Simple(void *p, int len, unsigned char *output);
  
  void hmac_sha1_simple(void *key, int keylen, void *data, int datalen,
  		      unsigned char *output);
  typedef struct {
      uint32 h[8];
      unsigned char block[64];
      int blkused;
      uint32 lenhi, lenlo;
  } SHA256_State;
! void SHA256_Init(SHA256_State * s);
  void SHA256_Bytes(SHA256_State * s, const void *p, int len);
! void SHA256_Final(SHA256_State * s, unsigned char *output);
  void SHA256_Simple(const void *p, int len, unsigned char *output);
  
  typedef struct {
      uint64 h[8];
      unsigned char block[128];
      int blkused;
      uint32 len[4];
  } SHA512_State;
! void SHA512_Init(SHA512_State * s);
  void SHA512_Bytes(SHA512_State * s, const void *p, int len);
! void SHA512_Final(SHA512_State * s, unsigned char *output);
  void SHA512_Simple(const void *p, int len, unsigned char *output);
  
  struct ssh_cipher {
--- 125,174 ----
  void hmacmd5_do_hmac(void *handle, unsigned char const *blk, int len,
  		     unsigned char *hmac);
  
+ #define SHA_Init putty_SHA_Init
+ #define SHA_Final putty_SHA_Final
+ 
  typedef struct {
      uint32 h[5];
      unsigned char block[64];
      int blkused;
      uint32 lenhi, lenlo;
  } SHA_State;
! void putty_SHA_Init(SHA_State * s);
  void SHA_Bytes(SHA_State * s, void *p, int len);
! void putty_SHA_Final(SHA_State * s, unsigned char *output);
  void SHA_Simple(void *p, int len, unsigned char *output);
  
  void hmac_sha1_simple(void *key, int keylen, void *data, int datalen,
  		      unsigned char *output);
+ 
+ #define SHA256_Init putty_SHA256_Init
+ #define SHA256_Final putty_SHA256_Final
+ 
  typedef struct {
      uint32 h[8];
      unsigned char block[64];
      int blkused;
      uint32 lenhi, lenlo;
  } SHA256_State;
! void putty_SHA256_Init(SHA256_State * s);
  void SHA256_Bytes(SHA256_State * s, const void *p, int len);
! void putty_SHA256_Final(SHA256_State * s, unsigned char *output);
  void SHA256_Simple(const void *p, int len, unsigned char *output);
  
+ 
+ #define SHA512_Init putty_SHA512_Init
+ #define SHA512_Final putty_SHA512_Final
+ 
  typedef struct {
      uint64 h[8];
      unsigned char block[128];
      int blkused;
      uint32 len[4];
  } SHA512_State;
! void putty_SHA512_Init(SHA512_State * s);
  void SHA512_Bytes(SHA512_State * s, const void *p, int len);
! void putty_SHA512_Final(SHA512_State * s, unsigned char *output);
  void SHA512_Simple(const void *p, int len, unsigned char *output);
  
  struct ssh_cipher {
*** C:/usr/ttssh2/libs/putty-src/SSHSH256.C	Sun Mar 12 15:39:20 2006
--- C:/usr/ttssh2/libs/putty/SSHSH256.C	Tue Oct 16 00:12:43 2012
***************
*** 93,99 ****
  
  #define BLKSIZE 64
  
! void SHA256_Init(SHA256_State *s) {
      SHA256_Core_Init(s);
      s->blkused = 0;
      s->lenhi = s->lenlo = 0;
--- 93,99 ----
  
  #define BLKSIZE 64
  
! void putty_SHA256_Init(SHA256_State *s) {
      SHA256_Core_Init(s);
      s->blkused = 0;
      s->lenhi = s->lenlo = 0;
***************
*** 141,147 ****
      }
  }
  
! void SHA256_Final(SHA256_State *s, unsigned char *digest) {
      int i;
      int pad;
      unsigned char c[64];
--- 141,147 ----
      }
  }
  
! void putty_SHA256_Final(SHA256_State *s, unsigned char *digest) {
      int i;
      int pad;
      unsigned char c[64];
*** C:/usr/ttssh2/libs/putty-src/SSHSH512.C	Tue Nov 10 19:14:16 2009
--- C:/usr/ttssh2/libs/putty/SSHSH512.C	Tue Oct 16 00:12:14 2012
***************
*** 167,173 ****
   * at the end, and pass those blocks to the core SHA512 algorithm.
   */
  
! void SHA512_Init(SHA512_State *s) {
      int i;
      SHA512_Core_Init(s);
      s->blkused = 0;
--- 167,173 ----
   * at the end, and pass those blocks to the core SHA512 algorithm.
   */
  
! void putty_SHA512_Init(SHA512_State *s) {
      int i;
      SHA512_Core_Init(s);
      s->blkused = 0;
***************
*** 224,230 ****
      }
  }
  
! void SHA512_Final(SHA512_State *s, unsigned char *digest) {
      int i;
      int pad;
      unsigned char c[BLKSIZE];
--- 224,230 ----
      }
  }
  
! void putty_SHA512_Final(SHA512_State *s, unsigned char *digest) {
      int i;
      int pad;
      unsigned char c[BLKSIZE];
*** C:/usr/ttssh2/libs/putty-src/SSHSHA.C	Wed Nov 26 12:49:26 2008
--- C:/usr/ttssh2/libs/putty/SSHSHA.C	Tue Oct 16 00:09:34 2012
***************
*** 91,97 ****
   * the end, and pass those blocks to the core SHA algorithm.
   */
  
! void SHA_Init(SHA_State * s)
  {
      SHA_Core_Init(s->h);
      s->blkused = 0;
--- 91,97 ----
   * the end, and pass those blocks to the core SHA algorithm.
   */
  
! void putty_SHA_Init(SHA_State * s)
  {
      SHA_Core_Init(s->h);
      s->blkused = 0;
***************
*** 141,147 ****
      }
  }
  
! void SHA_Final(SHA_State * s, unsigned char *output)
  {
      int i;
      int pad;
--- 141,147 ----
      }
  }
  
! void putty_SHA_Final(SHA_State * s, unsigned char *output)
  {
      int i;
      int pad;
